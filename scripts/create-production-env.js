/**
 * Create production-ready environment configuration
 */

const fs = require('fs');

function parseEnvFile(filePath) {
  if (!fs.existsSync(filePath)) {
    return {};
  }

  const content = fs.readFileSync(filePath, 'utf8');
  const vars = {};

  content.split('\n').forEach(line => {
    line = line.trim();
    if (line && !line.startsWith('#')) {
      const [key, ...valueParts] = line.split('=');
      if (key && valueParts.length > 0) {
        vars[key.trim()] = valueParts.join('=').replace(/^["']|["']$/g, '');
      }
    }
  });

  return vars;
}

function createProductionEnv() {
  console.log('üîß Creating production environment configuration...\n');

  const localVars = parseEnvFile('.env.local');
  const vercelVars = parseEnvFile('.env.vercel');

  // Merge configurations, prioritizing local values for accuracy
  const productionVars = { ...vercelVars, ...localVars };

  // Remove development-specific variables
  delete productionVars['VERCEL_OIDC_TOKEN']; // This is auto-generated by Vercel

  // Ensure critical production variables are set
  const criticalVars = [
    'NEXT_PUBLIC_SUPABASE_URL',
    'SUPABASE_SERVICE_ROLE_KEY',
    'NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY',
    'CLERK_SECRET_KEY',
    'MIXCLOUD_CLIENT_ID',
    'MIXCLOUD_CLIENT_SECRET',
    'NEXT_PUBLIC_STORYBLOK_ACCESS_TOKEN',
    'STORYBLOK_MANAGEMENT_TOKEN',
    'OPENAI_API_KEY',
    'STREAMGUYS_API_KEY',
    'STREAMGUYS_MONITOR_UUID',
    'SPOTIFY_CLIENT_ID',
    'SPOTIFY_CLIENT_SECRET',
    'YOUTUBE_API_KEY',
    'CLERK_ADMIN_ROLE',
    'STORYBLOK_REGION'
  ];

  console.log('üîë Checking critical variables:');
  criticalVars.forEach(key => {
    const exists = key in productionVars;
    console.log(`   ${key}: ${exists ? '‚úÖ' : '‚ùå MISSING'}`);
  });

  const missingCritical = criticalVars.filter(key => !(key in productionVars));

  if (missingCritical.length > 0) {
    console.log('\n‚ùå Missing critical variables:');
    missingCritical.forEach(key => console.log(`   - ${key}`));
    console.log('\nPlease ensure these are set in your local .env.local file');
    return false;
  }

  // Create production environment file
  const envContent = Object.entries(productionVars)
    .sort(([a], [b]) => a.localeCompare(b))
    .map(([key, value]) => `${key}=${value}`)
    .join('\n');

  fs.writeFileSync('.env.production', `# Production Environment Variables\n# Generated on ${new Date().toISOString()}\n\n${envContent}\n`);

  console.log('\n‚úÖ Created .env.production file');
  console.log(`üìä Total variables: ${Object.keys(productionVars).length}`);

  // Create Vercel import commands
  const vercelCommands = Object.entries(productionVars)
    .map(([key, value]) => `echo "${value}" | vercel env add ${key} production`)
    .join('\n');

  fs.writeFileSync('vercel-env-commands.sh', `#!/bin/bash\n# Commands to add environment variables to Vercel\n# Generated on ${new Date().toISOString()}\n\n${vercelCommands}\n`);

  console.log('‚úÖ Created vercel-env-commands.sh script');
  console.log('\nüéØ Production environment is ready!');

  console.log('\nüìù Next steps:');
  console.log('1. Run: chmod +x vercel-env-commands.sh');
  console.log('2. Run: ./vercel-env-commands.sh (to add all vars to Vercel)');
  console.log('3. Or manually add missing vars using the Vercel dashboard');

  return true;
}

const success = createProductionEnv();
process.exit(success ? 0 : 1);